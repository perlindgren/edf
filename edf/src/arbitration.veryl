import Types::*;

module Arbitration #() (
    i_int_vec: input  IntVec  ,
    i_now    : input  DeadLine,
    o_item   : output TreeItem,

) {
    function Normalize (
        i_int_vec: input IntVec  ,
        i_now    : input DeadLine,
    ) -> RelDeadLines {
        var o_rel_dl: RelDeadLines; // = {0 as DeadLine repeat NrVec};

        for i: u32 in 0..NrVec {
            if i_int_vec[i].pend & i_int_vec[i].enable {
                o_rel_dl[i] = i_int_vec[i].abs_dl - i_now;
            } else {
                o_rel_dl[i] = {1'0 repeat 1, 1'1 repeat 7}; // MAX positive number
            }
        }
        return o_rel_dl;
    }

    inst arb_tree: ArbTree (
        i_rel_dl: Normalize(i_int_vec, i_now),
        o_item                               ,
    );

}
